import autoMajorUnit from '../../core/utils/auto-major-unit';
import { valueOrDefault } from '../../common';
import calculateSlope from './calculate-slope';
import scatterValueGetter from './scatter-value-getter';

function scatterLinearTrendLine(context) {
    var options = context.options;
    var seriesValues = context.seriesValues;

    var data = getData({ seriesValues: seriesValues, options: options });
    if (data) {
        return Object.assign({}, options,

            {type: 'scatterLine',
            data: data});
    }

    return null;
}

function getData(ref) {
    var seriesValues = ref.seriesValues;
    var options = ref.options;

    var ref$1 = calculateSlope(seriesValues(), scatterValueGetter(options.field));
    var slope = ref$1.slope;
    var intercept = ref$1.intercept;
    var count = ref$1.count;
    var xMin = ref$1.xMin;
    var xMax = ref$1.xMax;

    if (count > 0) {
        var data = [];
        var forecast = (options.trendline || {}).forecast;
        if (forecast) {
            if (forecast.before > 0) {
                xMin -= forecast.before;
            }

            if (forecast.after > 0) {
                xMax += forecast.after;
            }
        }

        var samplingInterval = (options.trendline || {}).samplingInterval;
        var delta = valueOrDefault(samplingInterval,  autoMajorUnit(xMin, xMax) / 10);
        if (samplingInterval <= 0) {
            delta = xMax - xMin;
        }

        for (var x = xMin; x <= xMax; x += delta) {
            data.push([ x,
                slope * x + intercept
            ]);
        }

        return data;
    }

    return null;
}

export default scatterLinearTrendLine;
